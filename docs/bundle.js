(()=>{var e={902:e=>{e.exports="#version 300 es\nprecision highp float;\n\nuniform vec2 u_resolution;\nuniform sampler2D u_cameraTexture;\nuniform vec2 u_cameraResolution;\nuniform vec2 u_translation;\nuniform float u_scale;\nuniform vec3 u_circle1;\nuniform vec3 u_circle2;\nuniform vec2 u_cornerUpperRight;\n\nconst float GAMMA = 2.2;\nconst float DISPLAY_GAMMA_COEFF = 1. / GAMMA;\nvec4 gammaCorrect(vec4 rgba) {\n    return vec4((min(pow(rgba.r, DISPLAY_GAMMA_COEFF), 1.)),\n                (min(pow(rgba.g, DISPLAY_GAMMA_COEFF), 1.)),\n                (min(pow(rgba.b, DISPLAY_GAMMA_COEFF), 1.)),\n                rgba.a);\n}\n\nvec4 deGamma(vec4 rgba) {\n    return vec4((min(pow(rgba.r, GAMMA), 1.)),\n                (min(pow(rgba.g, GAMMA), 1.)),\n                (min(pow(rgba.b, GAMMA), 1.)),\n                rgba.a);\n}\n\n\nvec3 hsv2rgb(const float h, const float s, const float v){\n    vec3 c = vec3(h, s, v);\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// from Syntopia http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec2 rand2n(const vec2 co, const float sampleIndex) {\n    vec2 seed = co * (sampleIndex + 1.0);\n    seed+=vec2(-1,1);\n    // implementation based on: lumina.sourceforge.net/Tutorials/Noise.html\n    return vec2(fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453),\n                fract(cos(dot(seed.xy ,vec2(4.898,7.23))) * 23421.631));\n}\n\nvec2 circleInversion(const vec2 pos, const vec3 circle){\n    vec2 p = pos - circle.xy;\n    float d = length(p);\n    return (p * circle.z * circle.z)/(d * d) + circle.xy;\n}\n\nconst int MAX_ITERATIONS = 20;\nvec2 iis(vec2 pos, out bool isOuter) {\n    int numInversions = 0;\n    vec3 c3 = vec3(-u_circle1.xy, u_circle1.z);\n    vec3 c4 = vec3(-u_circle2.xy, u_circle2.z);\n    isOuter = false;\n    for(int i = 0 ; i < MAX_ITERATIONS ; i++){\n        bool loopEnd = true;\n        if(distance(pos, c3.xy) < c3.z) {\n            pos = circleInversion(pos, c3);\n            loopEnd = false;\n            numInversions++;\n        } else if (distance(pos, c4.xy) < c4.z) {\n            pos = circleInversion(pos, c4);\n            loopEnd = false;\n            numInversions++;\n        } else if (distance(pos, u_circle1.xy) < u_circle1.z) {\n            pos = circleInversion(pos, u_circle1);\n            loopEnd = false;\n            numInversions++;\n        } else if (distance(pos, u_circle2.xy) < u_circle2.z) {\n            pos = circleInversion(pos, u_circle2);\n            loopEnd = false;\n            numInversions++;\n        }\n\n        if(loopEnd) break;\n    }\n    if(length(pos) > 1.5) {\n        isOuter = true;\n    }\n    return pos;\n}\n\nconst float MAX_SAMPLES = 100.;\nout vec4 outColor;\nvoid main() {\n    vec4 sum = vec4(0);\n    float ratio = u_resolution.x / u_resolution.y / 2.0;\n    vec2 cornerLowerLeft = -u_cornerUpperRight;\n    vec2 tileSize = u_cornerUpperRight - cornerLowerLeft;\n    //  sum = texture(u_cameraTexture, abs((position - cornerLowerLeft) / size));\n    float cameraAspect = u_cameraResolution.y / u_cameraResolution.x;\n    float tileAspect = tileSize.y / tileSize.x;\n    vec2 cameraSizeOnScreen;\n    vec2 offset;\n    if(tileAspect >= cameraAspect) {\n        // 幅を1としてときにタイルの方が高さが大きい\n        // 横方向をクリップ\n        //cameraWidth = u_cameraResolution.x * (tileSize.x / tileSize.y);\n        //cameraHeight = u_cameraResolution.y;\n        //offsetX = (u_cameraResolution.x - cameraWidth) / 2.;\n        cameraSizeOnScreen = vec2(tileSize.y * (u_cameraResolution.x / u_cameraResolution.y), tileSize.y);\n        offset = vec2((cameraSizeOnScreen.x - tileSize.x) * 0.5, 0);\n    } else {\n        // 幅を1としてときに画像の方が高さが大きい\n        // 縦方向でクリップ\n        //cameraWidth = u_cameraResolution.x;\n        //cameraHeight = u_cameraResolution.x * tileAspect;\n        //offsetY = (u_cameraResolution.y - cameraHeight) / 2.;\n    }\n    for(float i = 0.; i < MAX_SAMPLES; i++){\n        vec2 position = ((gl_FragCoord.xy + rand2n(gl_FragCoord.xy, i)) / u_resolution.yy ) - vec2(ratio, 0.5);\n        position = position * u_scale;\n        position += u_translation;\n\n        //sum += texture(u_cameraTexture, gl_FragCoord.xy / u_cameraResolution);\n\n        vec2 cornerLowerLeft = -u_cornerUpperRight;\n        vec2 tileSize = u_cornerUpperRight - cornerLowerLeft;\n        //  sum = texture(u_cameraTexture, abs((position - cornerLowerLeft) / size));\n        float cameraAspect = u_cameraResolution.y / u_cameraResolution.x;\n        float tileAspect = tileSize.y / tileSize.x;\n        bool isOuter;\n        vec2 pos = iis(position, isOuter);\n        if(isOuter) {\n            sum += vec4(0, 0, 0, 1);\n        } else {\n            sum += texture(u_cameraTexture, 1.0 - ((pos - cornerLowerLeft + offset) / cameraSizeOnScreen));\n        }\n    }\n    \n    outColor = sum / MAX_SAMPLES;\n}\n"},228:e=>{e.exports="#version 300 es\n\nin vec2 a_vertex;\nout vec2 v_texCoord;\n\nvoid main() {\n    v_texCoord = a_vertex.xy * 0.5 + 0.5;\n    gl_Position = vec4(a_vertex, 0., 1.0);\n}\n"}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,i),s.exports}(()=>{"use strict";class e{constructor(){}static GetWebGL2Context(e){return e.getContext("webgl2")||(console.log("WebGL 2.0 is not supported on this device or browser! Please use another browser or device."),void alert("WebGL 2.0 is not supported on this device or browser! Please use another browser or device."))}static CreateStaticVbo(e,t){const i=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),i}static CreateSquareVbo(t){return e.CreateStaticVbo(t,e.SQUARE)}static LinkProgram(e,t){if(e.linkProgram(t),!1===e.getProgramParameter(t,e.LINK_STATUS)){const i=e.getProgramInfoLog(t);console.log(`Link Program Error\n${i}`)}e.useProgram(t)}static AttachShader(e,t,i,n){const r=e.createShader(n);e.shaderSource(r,t),e.compileShader(r),!1===e.getShaderParameter(r,e.COMPILE_STATUS)&&console.log(`Shader Compilation Error\n${e.getShaderInfoLog(r)}`),e.attachShader(i,r)}static CreateTexture(e,t,i,n,r,s){const o=e.createTexture();return e.bindTexture(e.TEXTURE_2D,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,n,t,i,0,r,s,null),e.bindTexture(e.TEXTURE_2D,null),o}static CreateRGBTexture(t,i,n,r){return e.CreateTexture(t,i,n,t.RGB,t.RGB,r)}static CreateRGBUnsignedByteTexture(t,i,n){return e.CreateRGBTexture(t,i,n,t.UNSIGNED_BYTE)}static CreateRGBFloatTexture(t,i,n){return e.CreateRGBTexture(t,i,n,t.FLOAT)}static CreateRGBUnsignedByteTextures(t,i,n,r){const s=[];for(let o=0;o<r;o++)s.push(e.CreateRGBUnsignedByteTexture(t,i,n));return s}static CreateRGBAUnsignedByteTexture(t,i,n){return e.CreateTexture(t,i,n,t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}static CreateRGBAUnsignedByteImageTexture(e,t,i,n){const r=e.createTexture();return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,i,0,e.RGBA,e.UNSIGNED_BYTE,n),e.bindTexture(e.TEXTURE_2D,null),r}static CreateRGBAUnsignedByteTextures(t,i,n,r){const s=[];for(let o=0;o<r;o++)s.push(e.CreateRGBAUnsignedByteTexture(t,i,n));return s}static CreateRGBAFloatTexture(t,i,n){return e.CreateTexture(t,i,n,t.RGBA16F,t.RGBA,t.FLOAT)}static CreateRGBAFloatTextures(t,i,n,r){const s=[];for(let o=0;o<r;o++)s.push(e.CreateRGBAFloatTexture(t,i,n));return s}static get SQUARE(){return[-1,-1,-1,1,1,-1,1,1]}}const t=i(228),n=i(902);class r{uniLocations;constructor(e){this.canvas=e,this.isRendering=!1}initialize(){this.gl=e.GetWebGL2Context(this.canvas),this.vertexBuffer=e.CreateSquareVbo(this.gl),this.renderProgram=this.gl.createProgram(),e.AttachShader(this.gl,t,this.renderProgram,this.gl.VERTEX_SHADER),e.AttachShader(this.gl,n,this.renderProgram,this.gl.FRAGMENT_SHADER),e.LinkProgram(this.gl,this.renderProgram),this.renderVAttrib=this.gl.getAttribLocation(this.renderProgram,"a_vertex"),this.gl.enableVertexAttribArray(this.renderVAttrib),this.initializeUniormLocations()}initializeUniormLocations(){this.uniLocations=[],this.uniLocations.push(this.gl.getUniformLocation(this.renderProgram,"u_resolution"))}setUniformValues(e,t){let i=0;this.gl.uniform2f(this.uniLocations[i++],e,t)}render(e){this.gl.viewport(0,0,this.canvas.width,this.canvas.height),this.gl.useProgram(this.renderProgram),this.setUniformValues(this.canvas.width,this.canvas.height),e.setUniformValues(this.gl),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertexBuffer),this.gl.vertexAttribPointer(this.renderVAttrib,2,this.gl.FLOAT,!1,0,0),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.gl.flush()}}class s{video;isPlayingVideo;texture;width;height;constructor(){this.video=document.createElement("video"),this.isPlaying=!1}connectToCamera(t){navigator.mediaDevices.getUserMedia?navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then((i=>{this.video=document.createElement("video"),this.video.srcObject=i;const n=()=>{this.video.play(),this.isPlayingVideo=!0,this.width=this.video.videoWidth,this.height=this.video.videoHeight,this.texture=e.CreateRGBUnsignedByteTextures(t,this.video.videoWidth,this.video.videoHeight,1)[0],this.video.removeEventListener("canplay",n)};this.video.addEventListener("canplay",n)}),(e=>{console.error(e)})):console.error("getUserMedia is not supported.")}updateTexture(e){this.isPlayingVideo&&e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.video)}}class o{x;y;constructor(e,t){this.x=e,this.y=t}add(e){return new o(this.x+e.x,this.y+e.y)}sub(e){return new o(this.x-e.x,this.y-e.y)}prod(e){return new o(this.x*e.x,this.y*e.y)}div(e){return new o(this.x/e.x,this.y/e.y)}scale(e){return new o(this.x*e,this.y*e)}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}lengthSq(){return this.x*this.x+this.y*this.y}normalize(){return this.scale(1/this.length())}eq(e){return Math.abs(this.x-e.x)<=o.EPSILON&&Math.abs(this.y-e.y)<=o.EPSILON}cloneDeeply(){return new o(this.x,this.y)}static normalize(e){return e.normalize()}static dot(e,t){return e.x*t.x+e.y*t.y}static distance(e,t){const i=e.sub(t);return Math.sqrt(i.x*i.x+i.y*i.y)}static get EPSILON(){return 1e-5}getUniformArray(){return[this.x,this.y]}get xx(){return new o(this.x,this.x)}get yy(){return new o(this.y,this.y)}get xy(){return new o(this.x,this.y)}get yx(){return new o(this.y,this.x)}}class a{x;y;z;constructor(e,t,i){this.x=e,this.y=t,this.z=i}add(e){return new a(this.x+e.x,this.y+e.y,this.z+e.z)}sub(e){return new a(this.x-e.x,this.y-e.y,this.z-e.z)}prod(e){return new a(this.x*e.x,this.y*e.y,this.z*e.z)}div(e){return new a(this.x/e.x,this.y/e.y,this.z/e.z)}scale(e){return new a(this.x*e,this.y*e,this.z*e)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}normalize(){return this.scale(1/this.length())}static normalize(e){return e.normalize()}static dot(e,t){return e.x*t.x+e.y*t.y+e.z*t.z}static cross(e,t){return new a(e.y*t.z-e.z*t.y,e.z*t.x-e.x*t.z,e.x*t.y-e.y*t.x)}static distance(e,t){const i=e.sub(t);return Math.sqrt(i.x*i.x+i.y*i.y)}rotateAroundX(e){const t=Math.cos(e),i=Math.sin(e);return new a(this.x,t*this.y+-i*this.z,i*this.y+t*this.z)}rotateAroundY(e){const t=Math.cos(e),i=Math.sin(e);return new a(t*this.x+i*this.z,this.y,-i*this.x+t*this.z)}rotateAroundZ(e){const t=Math.cos(e),i=Math.sin(e);return new a(t*this.x-i*this.y,i*this.x+t*this.y,this.z)}}class c{center;r;constructor(e,t){this.center=e,this.r=t}invertOnPoint(e){const t=this.r*this.r,i=e.sub(this.center),n=i.lengthSq();return i.scale(t/n).add(this.center)}invertOnCircle(e){const t=e.r*Math.sqrt(2)/2,i=this.invertOnPoint(e.center.add(new o(t,t))),n=this.invertOnPoint(e.center.add(new o(-t,-t))),r=this.invertOnPoint(e.center.add(new o(t,-t)));return c.fromPoints(i,n,r)}static getIntersection(e,t){const i=e.center.sub(t.center),n=o.dot(i,i),r=(n+t.r*t.r-e.r*e.r)/2,s=r*r;if(n*t.r*t.r-s<0)throw new Error("Unable to compute intersections");const a=Math.sqrt(n*t.r*t.r-s);return[new o((r*i.x+i.y*a)/n+t.center.x,(r*i.y-i.x*a)/n+t.center.y),new o((r*i.x-i.y*a)/n+t.center.x,(r*i.y+i.x*a)/n+t.center.y)]}static fromPoints(e,t,i){const n=o.distance(t,i),r=o.distance(e,i),s=o.distance(e,t),a=n*n*(r*r+s*s-n*n),h=r*r*(n*n+s*s-r*r),u=s*s*(n*n+r*r-s*s),l=a+h+u,x=new o((a*e.x+h*t.x+u*i.x)/l,(a*e.y+h*t.y+u*i.y)/l),d=o.distance(x,e);return new c(x,d)}}class h{constructor(){}static project(e){const t=o.dot(e,e);return new a(2*e.x/(1+t),2*e.y/(1+t),(-1+t)/(1+t))}static reverseProject(e){return new o(e.x/(1-e.z),e.y/(1-e.z))}}class u{isect1;isect2;corner;constructor(){this.circle1=new c(new o(1.2631,0),.771643),this.circle2=new c(new o(0,1.2631),.771643),this.bendX=0,this.bendY=0,this.x=.57735,this.y=.57735;const e=[1,0,0,0,Math.cos(this.bendX),Math.sin(this.bendX),0,Math.sin(this.bendX),Math.cos(this.bendX)],t=[Math.cos(this.bendY),0,Math.sin(this.bendY),0,1,0,-Math.sin(this.bendY),0,Math.cos(this.bendY)];this.c1=this.computeCircleFromUpperAndLower(this.applyMat3(e,new a(0,this.y,Math.sqrt(1-this.y*this.y))),this.applyMat3(e,new a(0,this.y,-Math.sqrt(1-this.y*this.y)))),this.c2=this.computeCircleFromUpperAndLower(this.applyMat3(t,new a(this.x,0,Math.sqrt(1-this.x*this.x))),this.applyMat3(t,new a(this.x,0,-Math.sqrt(1-this.x*this.x)))),console.log(this.c1,this.c2),[this.isect1,this.isect2]=c.getIntersection(this.c1,this.c2),console.log(this.isect1,this.isect2),this.corner=this.isect1.length()<this.isect2.length()?this.isect1:this.isect2}computeCircleFromUpperAndLower(e,t){const i=h.reverseProject(e),n=h.reverseProject(t);return new c(i.add(n).scale(.5),.5*o.distance(i,n))}applyMat3(e,t){return new a(t.x*e[0]+t.y*e[1]+t.z*e[2],t.x*e[3]+t.y*e[4]+t.z*e[5],t.x*e[6]+t.y*e[7]+t.z*e[8])}}class l{constructor(){this.uniLocations=[],this.cameraTexture=new s,this.hyperbolicTessellation=new u,this.translation=new o(0,0),this.scale=2}initialize(e,t){this.gl=e,this.cameraTexture.connectToCamera(e),this.uniLocations=[],this.uniLocations.push(e.getUniformLocation(t,"u_translation")),this.uniLocations.push(e.getUniformLocation(t,"u_scale")),this.uniLocations.push(e.getUniformLocation(t,"u_cameraTexture")),this.uniLocations.push(e.getUniformLocation(t,"u_cameraResolution")),this.uniLocations.push(e.getUniformLocation(t,"u_circle1")),this.uniLocations.push(e.getUniformLocation(t,"u_circle2")),this.uniLocations.push(e.getUniformLocation(t,"u_cornerUpperRight"))}onUpdate(e){this.cameraTexture.updateTexture(e)}setUniformValues(e){let t=0;this.gl.uniform2f(this.uniLocations[t++],this.translation.x,this.translation.y),this.gl.uniform1f(this.uniLocations[t++],this.scale),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.cameraTexture.texture),this.gl.uniform1i(this.uniLocations[t++],0),this.gl.uniform2f(this.uniLocations[t++],this.cameraTexture.width,this.cameraTexture.height),this.gl.uniform3f(this.uniLocations[t++],this.hyperbolicTessellation.c1.center.x,this.hyperbolicTessellation.c1.center.y,this.hyperbolicTessellation.c1.r),this.gl.uniform3f(this.uniLocations[t++],this.hyperbolicTessellation.c2.center.x,this.hyperbolicTessellation.c2.center.y,this.hyperbolicTessellation.c2.r),this.gl.uniform2f(this.uniLocations[t++],this.hyperbolicTessellation.corner.x,this.hyperbolicTessellation.corner.y)}}window.addEventListener("load",(()=>{const e=document.querySelector("#canvas"),t=()=>{const t=e.parentElement;e.style.width=t.clientWidth+"px",e.style.height=t.clientHeight+"px",e.width=t.clientWidth,e.height=t.clientHeight};t();const i=new r(e),n=new l;i.initialize(),n.initialize(i.gl,i.renderProgram);const s=()=>{n.onUpdate(i.gl),i.render(n),window.requestAnimationFrame(s)};s();let o=setTimeout(t,100);window.addEventListener("resize",(()=>{window.clearTimeout(o),window.setTimeout(t,500)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,